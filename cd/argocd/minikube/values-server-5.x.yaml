configs:
  knownHostsAnnotations: {}
  knownHosts:
    data:
      ssh_known_hosts: |
        github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
  repositories:
    elastic:
      type: git
      name: elastic
      url: https://github.com/elastic/helm-charts
    fluent:
      type: git
      name: fluent
      url: https://github.com/fluent/helm-charts
    prometheus-community:
      type: helm
      name: prometheus-community
      url: https://prometheus-community.github.io/helm-charts
    grafana:
      type: helm
      name: grafana
      url: https://grafana.github.io/helm-charts
    bitnami:
      type: helm
      name: bitnami
      url: https://charts.bitnami.com/bitnami
    metrics-server:
      type: helm
      name: metrics-server
      url: https://kubernetes-sigs.github.io/metrics-server
    argocd:
      type: helm
      name: argocd
      url: https://argoproj.github.io/argo-helm
  secret:
    createSecret: true
    githubSecret: ""
    argocdServerAdminPassword: "$2a$10$zoUgs0Cox8AZsSgba3xsq.RVQoaZOFIJ/LL2rZcCs3uSrkxXE7QaG"
  credentialTemplates:
    corporate-git-ssh:
      url: git@github.com:umbrellacorp
      sshPrivatekey: |-
        -----BEGIN OPENSSH PRIVATE KEY-----
        ...
        -----END OPENSSH PRIVATE KEY-----
  credentialTemplatesAnnotations:
    managed-by: argocd.argoproj.io

controller:
  enableStatefulSet: true
  replicas: 1
  args:
    statusProcessors: "20"
    operationProcessors: "10"
    appResyncPeriod: "15"
    selfHealTimeout: "15"
    repoServerTimeoutSeconds: "60"
  nodeSelector: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchLabels:
            app.kubernetes.io/part-of: argocd
            app.kubernetes.io/component: application-controller
  priorityClassName: ""
  logFormat: json
  logLevel: error
  metrics:
    enable: true
    serviceMonitor:
      enabled: true
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi

repoServer:
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  logFormat: json
  logLevel: info
  nodeSelector: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchLabels:
            app.kubernetes.io/part-of: argocd
            app.kubernetes.io/component: repo-server
  serviceAccount:
    create: true
    name: argocd-repo-server
    annotations: {}
    automountServiceAccountToken: true
  rbac:
    - apiGroups:
      - ''
      resources:
      - secrets
      verbs:
      - get
      - list
      - watch
  volumes:
  - name: custom-tools
    emptyDir: {}
  initContainers:
  - name: download-tools
    image: alpine:3.8
    command: [sh, -c]
    args:
      - wget -q https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v1.12.0/argocd-vault-plugin_1.12.0_linux_amd64 -O/custom-tools/argocd-vault-plugin && chmod +x /custom-tools/argocd-vault-plugin
    volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
  volumeMounts:
  - mountPath: /usr/local/bin/argocd-vault-plugin
    name: custom-tools
    subPath: argocd-vault-plugin

server:
  name: cicd-main
  logLevel: info
  metrics:
    enabled: false
    applicationLabels:
      enabled: false
    serviceMonitor:
      enabled: true
      interval: 30s
      namespace: "argocd"
  extraArgs:
    - --insecure
  ingress:
    enabled: true
    annotations: {}
    labels: {}
    hosts:
      - argocd.minikube.cloud
    paths:
      - /
    pathType: Prefix
    extraPaths: []
    tls: []
    https: false
  extensions:
    enable: true
    image:
      repository: "ghcr.io/argoproj-labs/argocd-extensions"
      tag: "v0.1.0"
    contents:
      - name: rollout-extension
        url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.2.0/extension.tar
  configEnabled: true
  config:
    url: "https://argocd.minikube.cloud"
    ui.bannercontent: "Welcome to Minikube ArgoCD!"
    exec.enabled: true
    resource.customizations.useOpenLibs.argoproj.io_Application: "true"
    resource.customizations.health.argoproj.io_Application: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          if obj.status.health.message ~= nil then
            hs.message = obj.status.health.message
          end
        end
      end
      hs.message = "Waiting for Application"
      return hs
    dex.config: |-
      logger:
        level: debug
        format: json
      connectors:
      - type: google
        id: google
        name: Google
        config:
          issuer: https://accounts.google.com
          clientID: "475209831594-0000.apps.googleusercontent.com"
          clientSecret: "GOCSPX-0000"
          redirectURI: https://argocd.minikube.cloud/api/dex/callback
      - type: saml
        id: okta
        name: Okta
        config:
          issuer: http://www.okta.com/exk8iq0iovVYS8rfY4x7
          ssoURL: https://umbrellacorp.okta.com/app/umbrellacorp_agrocd_1/exk8iq0iovVYS8rfY4x7/sso/saml
          caData: |
            LS0tLS1CRUdJTiBDR==
          redirectURI: https://argocd.minikube.cloud/api/dex/callback
          usernameAttr: email
          emailAttr: email
          groupsAttr: group
    configManagementPlugins: |

      - name: argocd-vault-plugin
        generate:
          command: [argocd-vault-plugin]
          args:
            - |
              generate ./ -s $ARGOCD_ENV_ARGOCD_NAMESPACE:$ARGOCD_ENV_AVP_SECRET
      - name: argocd-vault-plugin-kustomize
        generate:
          command: [sh, -c]
          args:
            - |
              kustomize build . |\
              argocd-vault-plugin generate - -s $ARGOCD_ENV_ARGOCD_NAMESPACE:$ARGOCD_ENV_AVP_SECRET
      - name: argocd-vault-plugin-helm
        init:
          command: [sh, -c]
          args:
            - |
              helm dependency build
        generate:
          command: [sh, -c]
          args:
            - |
              helm template $ARGOCD_APP_NAME . $ARGOCD_ENV_HELM_ARGS |\
              argocd-vault-plugin generate - -s $ARGOCD_ENV_ARGOCD_NAMESPACE:$ARGOCD_ENV_AVP_SECRET

  configAnnotations: {}
  rbacConfigCreate: true
  rbacConfig:
    admin.enabled: "true"
    policy.csv: |
      g, luismiguel.saez@umbrellacorp.com, role:admin
    policy.default: role:readonly
    scopes: '[email,groups]'

extraObjects:
  # Crafted secret for git-ssh credentials, because secrets created from `credentialTemplates` are not working
  - apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      annotations:
        managed-by: argocd.argoproj.io
      labels:
        argocd.argoproj.io/secret-type: repo-creds
      name: creds-1317606831
      namespace: argocd
    data:
      # Base64 encoded SSH private key and Github repo template
      sshPrivateKey: ""
      url: ""
  #- apiVersion: argoproj.io/v1alpha1
  #  kind: ArgoCDExtension
  #  metadata:
  #    name: argo-rollouts-ui 
  #    finalizers:
  #      - extensions-finalizer.argocd.argoproj.io
  #  spec:
  #    sources:
  #      #- git:
  #      #    url: https://github.com/argoproj-labs/argocd-example-extension.git
  #      - web:
  #          url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.2.0/extension.tar 

