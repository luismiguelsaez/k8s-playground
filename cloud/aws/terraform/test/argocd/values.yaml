
fullnameOverride: "argocd"

configs:
  knownHostsAnnotations: {}
  knownHosts:
    data:
      ssh_known_hosts: |
        github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
  repositories:
    eks:
      type: helm
      name: eks
      url: https://aws.github.io/eks-charts
    external-dns:
      type: helm
      name: external-dns
      url: https://kubernetes-sigs.github.io/external-dns
    elastic:
      type: git
      name: elastic
      url: https://github.com/elastic/helm-charts
    prometheus-community:
      type: helm
      name: prometheus-community
      url: https://prometheus-community.github.io/helm-charts
    bitnami:
      type: helm
      name: bitnami
      url: https://charts.bitnami.com/bitnami
    metrics-server:
      type: helm
      name: metrics-server
      url: https://kubernetes-sigs.github.io/metrics-server
    argocd:
      type: helm
      name: argocd
      url: https://argoproj.github.io/argo-helm
  secret:
    createSecret: true
    githubSecret: ""
    argocdServerAdminPassword: "${ adminPass }"
  credentialTemplates:
    corporate-git-ssh:
      url: git@github.com:umbrellacorp
      sshPrivatekey: |-
        -----BEGIN OPENSSH PRIVATE KEY-----
        ...
        -----END OPENSSH PRIVATE KEY-----
  credentialTemplatesAnnotations:
    managed-by: argocd.argoproj.io

controller:
  replicas: 2
  enableStatefulSet: true
  nodeSelector: {}
  priorityClassName: ""
  logFormat: json
  logLevel: error
  metrics:
    enable: true
    serviceMonitor:
      enabled: true
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 128Mi

dex:
  resources:
    limits:
      cpu: 150m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

repoServer:
  nodeSelector: {}
  serviceAccount:
    create: true
    name: argocd-repo-server
    annotations: {}
    automountServiceAccountToken: true
  rbac:
    - apiGroups:
      - ''
      resources:
      - secrets
      verbs:
      - get
      - list
      - watch
  #envFrom:
  #  - secretRef:
  #      name: vault-configuration
  volumes:
  - name: custom-tools
    emptyDir: {}
  initContainers:
  - name: download-tools
    image: alpine:3.8
    command: [sh, -c]
    args:
      - wget -q https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v1.12.0/argocd-vault-plugin_1.12.0_linux_amd64 -O/custom-tools/argocd-vault-plugin && chmod +x /custom-tools/argocd-vault-plugin
    volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
  volumeMounts:
  - mountPath: /usr/local/bin/argocd-vault-plugin
    name: custom-tools
    subPath: argocd-vault-plugin
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

applicationSet:
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

notifications:
  #enabled: true
  #secret:
  #  create: true
  #  items:
  #    slack-token: "${ notificationsSlackToken }"
  #notifiers:
  #  service.slack:
  #    token: $slack-token
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

redis:
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

server:
  name: cicd-main
  logLevel: info
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  metrics:
    enabled: false
    applicationLabels:
      enabled: false
    serviceMonitor:
      enabled: true
      interval: 30s
      namespace: "argocd"
  extraArgs:
    - --insecure
  service:
    annotations: {}
    type: NodePort
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0
      alb.ingress.kubernetes.io/certificate-arn: ${ certificateArn }
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80},{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
    labels: {}
    hosts:
      - ${ argoCDHost }
    paths:
      - /
    pathType: Prefix
    extraPaths: []
    tls: []
    https: false
  extensions:
    enable: true
    image:
      repository: "ghcr.io/argoproj-labs/argocd-extensions"
      tag: "v0.1.0"
    contents:
      - name: rollout-extension
        url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.2.0/extension.tar
  configEnabled: true
  config:
    url: "https://argocd.dev.lokalise.cloud"
    dex.config: |-
      logger:
        level: debug
        format: json
      connectors:
      - type: saml
        id: okta
        name: Okta
        config:
          issuer: ${ oktaIssuer }
          ssoURL: ${ oktaSSOUrl }
          caData: ${ oktaCAData }
          redirectURI: https://${ argoCDHost }/api/dex/callback
          usernameAttr: email
          emailAttr: email
          groupsAttr: group
    configManagementPlugins: |

      - name: argocd-vault-plugin
        generate:
          command: [argocd-vault-plugin]
          args:
            - |
              generate ./ -s $${ARGOCD_ENV_ARGOCD_NAMESPACE:-"argocd"}:$${ARGOCD_ENV_AVP_SECRET:-"vault-configuration"}

      - name: argocd-vault-plugin-kustomize
        generate:
          command: [sh, -c]
          args:
            - |
              kustomize build . |\
              argocd-vault-plugin generate - -s $${ARGOCD_ENV_ARGOCD_NAMESPACE:-"argocd"}:$${ARGOCD_ENV_AVP_SECRET:-"vault-configuration"}

      - name: argocd-vault-plugin-helm
        init:
          command: [sh, -c]
          args:
            - |
              helm dependency build
        generate:
          command: [sh, -c]
          args:
            - |
              helm template $ARGOCD_APP_NAME . $${ARGOCD_ENV_HELM_ARGS} |\
              argocd-vault-plugin generate - -s $${ARGOCD_ENV_ARGOCD_NAMESPACE:-"argocd"}:$${ARGOCD_ENV_AVP_SECRET:-"vault-configuration"}

  configAnnotations: {}
  rbacConfigCreate: true
  rbacConfig:
    admin.enabled: "true"
    policy.csv: |
      g, Engineering, role:readonly
      g, Platform, role:admin
    policy.default: role:readonly
    scopes: '[email, groups]'
  rbacConfigAnnotations: {}
  additionalProjects:
  # Doc: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/project.yaml
    - name: argocd       # Name for the AppProject object
      namespace: argocd  # Namespace where to create the AppProject object
      additionalLabels: {}
      additionalAnnotations: {}
      description: Root project
      sourceRepos:
      - '*'
      destinations:
      - namespace: argocd
        server: https://kubernetes.default.svc
      - namespace: kube-system
        server: https://kubernetes.default.svc
      - namespace: monitoring
        server: https://kubernetes.default.svc
      namespaceResourceWhitelist:
      - group: '*'
        kind: '*'
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
      orphanedResources:
        warn: false
  additionalApplications:
    - name: argocd      # Name for the Application object
      namespace: argocd # Namespace where to create the Application object
      project: argocd
      source:
        repoURL: "${ repoUrl }"
        targetRevision: main
        path: "${ repoPath }"
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd
      syncPolicy:
        automated:
          selfHeal: true
          prune: false
          allowEmpty: false
      retry:
        limit: 5
        backoff:
          duration: 5s
          factor: 2
          maxDuration: 10m

extraObjects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: vault-configuration
      namespace: argocd
    type: Opaque
    stringData:
      VAULT_ADDR: "${ vault_addr }"
      AVP_TYPE: "vault"
      AVP_KV_VERSION: "2"
      AVP_AUTH_TYPE: "token"
      VAULT_TOKEN: "${ vault_token }"
  - apiVersion: v1
    kind: Secret
    metadata:
      name: private-corp-repo-creds
      namespace: argocd
      labels:
        argocd.argoproj.io/secret-type: repo-creds
    stringData:
      type: git
      url: "${ corpRepoUrl }"
      password: "${ corpRepoToken }"
      username: "not-used"
  - apiVersion: v1
    kind: Secret
    type: Opaque
    metadata:
      annotations:
        managed-by: argocd.argoproj.io
      labels:
        argocd.argoproj.io/secret-type: repository
      name: private-infra-repo
      namespace: argocd
    stringData:
      url: "${ repoUrl }"
      password: "${ repoToken }"
      username: "not-used"
  - apiVersion: argoproj.io/v1alpha1
    kind: ArgoCDExtension
    metadata:
      name: argo-rollouts-ui 
      finalizers:
        - extensions-finalizer.argocd.argoproj.io
    spec:
      sources:
        #- git:
        #    url: https://github.com/argoproj-labs/argocd-example-extension.git
        - web:
            url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.2.0/extension.tar 
